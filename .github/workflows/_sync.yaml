name: Build client
on:
  workflow_call:
    inputs:
      vald_checkout_src_ref:
        description: "Switch branches or restore working tree files to build vald"
        type: string
        default: main
        required: false
      client_checkout_target_ref:
        description: "Switch branches or restore working tree files to build vald"
        type: string
        default: main
        required: false
      enable_tag_push:
        description: "Whether or not to push tag"
        type: boolean
        default: false
        required: false
    secrets:
      CI_USER:
        required: true
      CI_TOKEN:
        required: true
      GPG_PRIVATE_KEY:
        required: true
env:
  CI_USER: ${{ secrets.CI_USER }}
  CI_TOKEN: ${{ secrets.CI_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

jobs:
  sync:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.client_checkout_target_ref }}
          token: ${{ env.CI_TOKEN }}
      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
      - uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Clone Vald repository
        run: |
          make vald/clone && make VALD_CHECKOUT_REF=${VALD_CHECKOUT_REF} vald/checkout
        env:
          VALD_CHECKOUT_REF: ${{ inputs.vald_checkout_src_ref }}
      # - name: Build and Push
      #   run: |
      #     # NOTE: The flow here will be changed to using the make command in the future, such as the following.
      #     #
      #     # 1. make deps
      #     # 2. make proto
      #     # 3. make vald/sha/update
      #     # 4. make vald/client/python/version/update
      #     # 5. make vald/sha/print
      #     echo "Install dependencies"
      #     sudo apt-get update
      #     sudo apt-get install -y python3-setuptools libprotobuf-dev libprotoc-dev protobuf-compiler
      #     pip3 install grpcio-tools
      #
      #     echo "Build proto"
      #     export GOPATH=$HOME/go
      #     make PYTHON=python3 proto
      #     make vald/sha/update
      #     make vald/client/python/version/update
      #
      #     echo "commit and push"
      #     SHA="$(make vald/sha/print)"
      #
      #     git remote set-url origin https://${CI_USER}:${CI_TOKEN}@github.com/$GITHUB_REPOSITORY
      #     git add .
      #     git commit -S --signoff -m "Update [vald sha: ${SHA}]"
      #     git push
      # - name: Create tag
      #   if: ${{ inputs.enable_tag_push == true }}
      #   continue-on-error: true
      #   run: |
      #     version="$(make vald/client/python/version/print)"
      #     git remote set-url origin "https://${CI_USER}:${CI_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
      #     git tag ${version}
      #     git push origin ${version}

#
# Copyright (C) 2019-2023 vdaas.org vald team <vald@vdaas.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: "Run backport PR creation"
on:
  pull_request:
    branches:
      - "main"
    types:
      - "closed"

jobs:
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dump-context

  create:
    runs-on: ubuntu-latest
    needs: [dump-contexts-to-log]
    env:
      TARGET_LABEL_NAME_PREFIX: "actions/backport/"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git config
        run: |
          git config --global --add safe.directory ${GITHUB_WORKSPACE}

      - uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Set Github context
        id: set_context
        run: |
          echo ${TARGET_LABEL_NAME_PREFIX}
          echo ${GITHUB_EVENT_PATH}
          cat ${GITHUB_EVENT_PATH}
          jq --version

          LABEL_NAMES=`cat ${GITHUB_EVENT_PATH} | jq -r --arg PREFIX $TARGET_LABEL_NAME_PREFIX '.event.pull_request.labels[] | select(.name | startswith($PREFIX)) | .name'`

          echo "LABEL_NAMES=${LABEL_NAMES}" >> $GITHUB_OUTPUT # e.g.) actions/backport/v1.7 actions/backport/v1.8
          echo "${LABEL_NAMES}"

      - name: Create backport PR
        if: ${{ steps.set_context.outputs.LABEL_NAMES != '' }}
        run: |
          for LABEL_NAME in ${LABEL_NAMES}; do
              RELEASE_BASE=`echo "${LABEL_NAME}" | sed -e "s:^${TARGET_LABEL_NAME_PREFIX}::"`        # e.g) vx.x
              RELEASE_BRANCH_NAME=release/${RELEASE_BASE}                                            # e.g) release/vx.x
              BACKPORT_BRANCH_NAME=backport/${RELEASE_BASE}/${GITHUB_HEAD_REF}                       # e.g) backport/vx.x/{current branch name}

              echo "RELEASE_BASE=${RELEASE_BASE}"
              echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}"
              echo "BACKPORT_BRANCH_NAME=${BACKPORT_BRANCH_NAME}"
              echo "SHA=${GITHUB_SHA}"

              git checkout ${RELEASE_BRANCH_NAME}

              git checkout -b ${BACKPORT_BRANCH_NAME}

              # Force cherry-pick. The conflicts will be modified within the backport PR.
              git cherry-pick $GITHUB_SHA
              git push origin ${BACKPORT_BRANCH_NAME}

              # gh pr create --base ${RELEASE_BRANCH_NAME} \
              #              --title "Backport to release/${RELEASE_BASE}" \
              #              --body-file .github/PULL_REQUEST_TEMPLATE.md
          done
        env:
          GITHUB_USER: ${{ secrets.DISPATCH_USER }}
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
